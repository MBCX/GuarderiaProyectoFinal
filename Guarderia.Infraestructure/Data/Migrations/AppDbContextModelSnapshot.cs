// <auto-generated />
using System;
using Guarderia.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Guarderia.Infraestructure.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Guarderia.Domain.Entities.Alergia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IngredienteId");

                    b.HasIndex("NinoId");

                    b.ToTable("Alergias");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Asistencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NinoId", "Fecha")
                        .IsUnique();

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.CargoMensual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<decimal>("CostoComidas")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("CostoFijo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaPago")
                        .HasColumnType("datetime2");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.Property<int>("ResponsablePagoId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCargo")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ResponsablePagoId");

                    b.HasIndex("NinoId", "Mes", "Año")
                        .IsUnique();

                    b.ToTable("CargoMensuales");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Comida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Costo")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NinoId");

                    b.ToTable("Comidas");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.ConsumoDiario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ConsumoDiarios");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.ConsumoMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostoReal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("NinoId", "Fecha")
                        .IsUnique();

                    b.ToTable("ConsumosMenu");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.CostoFijoMensual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("FechaVigenciaDesde")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaVigenciaHasta")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("CostoFijoMensuals");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.FamiliarOConocido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FamiliarOConocidos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Ingrediente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("EsAlergeno")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.MenuPlato", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("PlatoId")
                        .HasColumnType("int");

                    b.Property<bool>("EsPlatoPrincipal")
                        .HasColumnType("bit");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("Id", "PlatoId");

                    b.HasIndex("PlatoId");

                    b.ToTable("MenuPlatos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Nino", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaBaja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroMatricula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ResponsablePagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResponsablePagoId");

                    b.ToTable("Ninos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.NinoPersonaAutorizada", b =>
                {
                    b.Property<int>("NinoId")
                        .HasColumnType("int");

                    b.Property<int>("PersonaAutorizadaId")
                        .HasColumnType("int");

                    b.Property<bool>("Activa")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaAutorizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRevocacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ResponsablePagoId")
                        .HasColumnType("int");

                    b.HasKey("NinoId", "PersonaAutorizadaId");

                    b.HasIndex("PersonaAutorizadaId");

                    b.HasIndex("ResponsablePagoId");

                    b.ToTable("NinoPersonaAutorizadas");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.PersonaAutorizada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Relacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.ToTable("PersonaAutorizadas");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Plato", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TipoPlato")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Platos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.PlatoIngrediente", b =>
                {
                    b.Property<int>("PlatoId")
                        .HasColumnType("int");

                    b.Property<int>("IngredienteId")
                        .HasColumnType("int");

                    b.Property<string>("Cantidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("EsAlergeno")
                        .HasColumnType("bit");

                    b.HasKey("PlatoId", "IngredienteId");

                    b.HasIndex("IngredienteId");

                    b.ToTable("PlatoIngredientes");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.ResponsablePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CuentaCorriente")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Cedula")
                        .IsUnique();

                    b.ToTable("ResponsablePagos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Alergia", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Ingrediente", "Ingrediente")
                        .WithMany("Alergias")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.Nino", null)
                        .WithMany("Alergias")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Asistencia", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Nino", "Nino")
                        .WithMany("Asistencias")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.CargoMensual", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Nino", "Nino")
                        .WithMany("CargosMensuales")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.ResponsablePago", "ResponsablePago")
                        .WithMany()
                        .HasForeignKey("ResponsablePagoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nino");

                    b.Navigation("ResponsablePago");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Comida", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Nino", "Nino")
                        .WithMany("Comidas")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.ConsumoMenu", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Menu", "Menu")
                        .WithMany("Consumos")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.Nino", "Nino")
                        .WithMany("ConsumosMenu")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Nino");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.MenuPlato", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Menu", "Menu")
                        .WithMany("Platos")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.Plato", "Plato")
                        .WithMany("Menus")
                        .HasForeignKey("PlatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Plato");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Nino", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.ResponsablePago", "ResponsablePago")
                        .WithMany("NinosAPagar")
                        .HasForeignKey("ResponsablePagoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ResponsablePago");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.NinoPersonaAutorizada", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Nino", "Nino")
                        .WithMany("PersonasAutorizadas")
                        .HasForeignKey("NinoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.PersonaAutorizada", "PersonaAutorizada")
                        .WithMany("NinosAutorizados")
                        .HasForeignKey("PersonaAutorizadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.ResponsablePago", null)
                        .WithMany("NinosAutorizados")
                        .HasForeignKey("ResponsablePagoId");

                    b.Navigation("Nino");

                    b.Navigation("PersonaAutorizada");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.PlatoIngrediente", b =>
                {
                    b.HasOne("Guarderia.Domain.Entities.Ingrediente", "Ingrediente")
                        .WithMany("Platos")
                        .HasForeignKey("IngredienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Guarderia.Domain.Entities.Plato", "Plato")
                        .WithMany("Ingredientes")
                        .HasForeignKey("PlatoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingrediente");

                    b.Navigation("Plato");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Ingrediente", b =>
                {
                    b.Navigation("Alergias");

                    b.Navigation("Platos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Menu", b =>
                {
                    b.Navigation("Consumos");

                    b.Navigation("Platos");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Nino", b =>
                {
                    b.Navigation("Alergias");

                    b.Navigation("Asistencias");

                    b.Navigation("CargosMensuales");

                    b.Navigation("Comidas");

                    b.Navigation("ConsumosMenu");

                    b.Navigation("PersonasAutorizadas");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.PersonaAutorizada", b =>
                {
                    b.Navigation("NinosAutorizados");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.Plato", b =>
                {
                    b.Navigation("Ingredientes");

                    b.Navigation("Menus");
                });

            modelBuilder.Entity("Guarderia.Domain.Entities.ResponsablePago", b =>
                {
                    b.Navigation("NinosAPagar");

                    b.Navigation("NinosAutorizados");
                });
#pragma warning restore 612, 618
        }
    }
}
